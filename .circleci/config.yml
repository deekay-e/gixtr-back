version: 2.1
orbs:
  codecov: codecov/codecov@3.2.5
  aws-cli: circleci/aws-cli@4.0.0
  slack: circleci/slack@4.12.5
executors:
  app-init:
    docker:
      - image: cimg/node:20.17.0
      - image: cimg/redis:7.2.5
      - image: 'cibuilds/base:latest'
    working_directory: ~/repo
  terraform-init:
    docker:
      - image: hashicorp/terraform:latest
  slack-init:
    docker:
      - image: 'cibuilds/base:latest'
    resource_class: small

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &zip-project
    run:
      name: Zip project
      command: |
          rm -rf node_modules
          zip gxitr.zip -r .
          echo "Zip successful"
  - &notify-on-fail
    slack/notify:
      event: fail
      channel: 'gixtr-builds'
      template: ''
      custom: |
        {
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "Job Failed. üî¥",
                "emoji": true
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Job*: ${CIRCLE_JOB}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Branch*:\n$CIRCLE_BRANCH"
                },
                {
                  "type": "mrkdwn",
                  "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                }
              ]
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View Job"
                  },
                  "url": "${CIRCLE_BUILD_URL}"
                }
              ]
            }
          ]
        }

jobs:
  build:
    executor: app-init
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache

  code-lint:
    executor: app-init
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint:check
      - *notify-on-fail

  code-format:
    executor: app-init
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check
      - *notify-on-fail

  code-test:
    executor: app-init
    steps:
      - checkout
      - setup_remote_docker
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Start redis server
          command: docker run --name gixtr-redis -p 6379:6379 -d redis
          background: true
      - run:
          name: Run unit test
          command: |
            sleep 3
            npm run test
      - codecov/upload
      - *notify-on-fail

  terraform-validate:
    executor: terraform-init
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform validate & format
          command: |
            cd deployment/
            terraform init -backend=false
            terraform validate
            terraform fmt
      - *notify-on-fail

  terraform-plan-and-apply:
    executor: terraform-init
    steps:
      - checkout
      - *show-current-branch-name
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Terraform plan
          command: |
            cd deployment/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Terraform apply
          command: |
            cd deployment/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply -auto-approve
      - *notify-on-fail

  terraform-destroy:
    executor: terraform-init
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform destroy
          command: |
            cd deployment/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy -auto-approve

  upload-project-to-s3:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - *zip-project
      - run:
          name: Upload project to S3
          command: |
            aws --region us-east-1 s3 cp gxitr.zip s3://gixtr-server-${CIRCLE_BRANCH}-app
      - *notify-on-fail

  push-to-aws-code-deploy:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Deploy changes with AWS code deploy
          command: |
            if [ "${CODE_DEPLOY_UPDATE}" == "true" ]
            then
                aws deploy create-deployment \
                    --region us-east-1 \
                    --application-name gixtr-server-${CIRCLE_BRANCH}-app \
                    --deployment-config-name CodeDeployDefault.AllAtOnce \
                    --deployment-group-name gixtr-server-${CIRCLE_BRANCH}-group \
                    --file-exists-behavior "OVERWRITE" \
                    --s3-location bucket=gixtr-server-${CIRCLE_BRANCH}-app,bundleType=zip,key=gixtr.zip
            fi
      - *notify-on-fail

  notify-via-slack:
    executor: slack-init
    steps:
      - run: echo "Slack notification"
      - slack/notify:
          event: 'always'
          channel: 'gixtr-builds'
          template: ''
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "‚úÖ üëç ‚úÖ ${CIRCLE_BRANCH} branch backend deployment is complete. ‚úÖ üëç ‚úÖ",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: ${CIRCLE_JOB}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

workflows:
  build_and_deploy:
    jobs:
      - build
      - code-lint:
          requires:
            - build
          filters:
            branches:
              only:
                - dev
                - stage
                - main
      - code-format:
          requires:
            - code-lint
          filters:
            branches:
              only:
                - dev
                - stage
                - main
      - code-test:
          requires:
            - code-format
          filters:
            branches:
              only:
                - dev
                - stage
                - main
      - terraform-validate:
          requires:
            - code-test
          filters:
            branches:
              only:
                - dev
                - stage
                - main
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - dev
                - stage
                - main
      - upload-project-to-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - dev
                - stage
                - main
      - push-to-aws-code-deploy:
          requires:
            - upload-project-to-s3
          filters:
            branches:
              only:
                - dev
                - stage
                - main
      - notify-via-slack:
          requires:
            - push-to-aws-code-deploy
          filters:
            branches:
              only:
                - dev
                - stage
                - main
      - hold:
          type: approval
          requires:
            - notify-via-slack
      - terraform-destroy:
          requires:
            - hold
          filters:
            branches:
              only:
                - dev
                - stage
                - main
